@model WebShop_FSharp.ViewModels.CatalogModels.ReviewDTO

<div class="box p-3">
    <div class="review">
        <div class="review-name">
            <a href="@Url.Content($"~/profile/{@Model.UserId}")">@Model.UserName</a>
        </div>
        <div class="review-image-container d-flex justify-content-center align-items-center">
            <img src="~/@Model.UserImagePath" class="review-image"/>
        </div>
        <div class="review-content">
            @Model.Content
        </div>
        <div class="review-rating-container">
            <div class="review-rating-star-text d-flex justify-content-center align-items-center">
                <div>@Model.Rating</div>
            </div>
            @{
                var percent = (Model.Rating - 1) / 9d;
                var fullRed = SrgbInverseCompanding((255, 0, 0));
                var fullGreen = SrgbInverseCompanding((0, 255, 0));
                
                var red = (int) ((1 - percent) * fullRed.r + percent * fullGreen.r);
                var green = (int) ((1 - percent) * fullRed.g + percent * fullGreen.g);
                var blue = (int) ((1 - percent) * fullRed.b + percent * fullGreen.b);

                var result = SrgbCompanding((red, green, blue));
            }
            
            @functions
            {
                (int r, int g, int b) SrgbInverseCompanding((int r, int g, int b) color)
                {
                    var r = InverseComponent(color.r / 255d) * 255;
                    var g = InverseComponent(color.g / 255d) * 255;
                    var b = InverseComponent(color.b / 255d) * 255;

                    return ((int) r, (int) g, (int) b);

                    double InverseComponent(double comp)
                    {
                        if (comp > 0.04045)
                            return Math.Pow((comp + 0.055)/1.055, 2.4);
                        return comp / 12.92;
                    }
                }
                
                (int r, int g, int b) SrgbCompanding((int r, int g, int b) color)
                {
                    var r = CompandComponent(color.r / 255d) * 255;
                    var g = CompandComponent(color.g / 255d) * 255;
                    var b = CompandComponent(color.b / 255d) * 255;

                    return ((int) r, (int) g, (int) b);

                    double CompandComponent(double comp)
                    {
                        if (comp > 0.0031308)
                            return 1.055 * Math.Pow(comp, 1 / 2.4d) - 0.055;
                        return comp * 12.92;
                    }
                } 
            }
            <div class="review-rating-star">
                <svg xmlns="http://www.w3.org/2000/svg" width="128" height="128" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"
                          style="color: rgb(@result.r, @result.g, @result.b);"/>
                </svg>
            </div>
        </div>
    </div>
</div>